import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { Button, LayoutWithNavigationBar, NavigationBar, Text, ThemeProvider, useTheme } from "md3-react";
import { Ribeye, Roboto } from "next/font/google";
import { useEffect, useState } from "react";
import { mdiAbTesting, mdiGlobeModel, mdiHome, mdiWeatherNight, mdiWeatherSunny } from "@mdi/js";
import { hexFromArgb } from "@material/material-color-utilities";
const roboto = Roboto({ subsets: ["latin"], weight: ["400", "500"] });

export default function Home() {
  const { updateSourceColor, scheme, toggleTheme, sourceColor, theme } =
    useTheme();
  const [color, setColor] = useState("#ff0000");
  const [compact, setCompact] = useState(
     true
  )

  useEffect(() => {
    if(window){
      window
    .matchMedia("(max-width: 768px)")
    .addEventListener('change', e => setCompact( e.matches ));
    }
  }, []);
  return (
    <div className={"app "+roboto.className}>
    <NavigationBar horizontal={true} segments={[{icon: mdiHome, label: "Strona główna"}]}></NavigationBar>
      <main
      style={{
        backgroundColor: hexFromArgb(scheme.background),
        padding: 16
      }}
    >
      
        <Text type="displayLarge">Zintegrowany System Notatek Szkolnych</Text>
        <Head>
          <title>Strona główna</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Button
        icon={theme === "dark" ? mdiWeatherSunny : mdiWeatherNight}
          onClick={() => {
            toggleTheme();
            console.log(theme);
          }}
        >
          Zmień motyw na {theme === "dark" ? "jasny" : "ciemny"}
        </Button>
        <Button
          onClick={() => {
            updateSourceColor("#ff00ff");
          }}
        >
          AA
        </Button>
        <Button
          onClick={
            color === "#ff0000"
              ? () => {
                  updateSourceColor("#0000ff");
                  setColor("#0000ff");
                }
              : () => {
                  updateSourceColor("#ff0000");
                  setColor("#ff0000");
                }
          }
        >
          Enabled {color}
        </Button>
        
        {/* <h1 style={{ color: ThemeTokens.error }}>AA</h1> */}
      
    </main>
    </div>
   
  );
}
